Source code files structure

codeforces
├──13-04
│  ├──1.py
│  ├──2.py
│  ├──3.py
│  ├──4.py
│  ├──5.py
│  └──h.py
├──8-04
│  ├──1.py
│  ├──2.py
│  ├──2a.py
│  ├──2b.py
│  └──3.py
└──contest
    ├──A.java
    ├──B.java
    ├──C.java
    ├──E.java
    ├──Main.java
    └──ModularSorting.java


Name: 2b.py
Path: 8-04/2b.py
```
t = int(input())
for _ in range(t):
    s = input()
    zeros = 0
    best = 0
    for ch in reversed(s):
        if ch == '0':
            zeros += 1
        else:
            best = max(best, zeros + 1)
    print(len(s) - best)

```

Name: 2.py
Path: 8-04/2.py
```
t = int(input())
for _ in range(t):
    s = input()
    z = 0
    b = 0
    for ch in s:
        if ch == '0':
            z += 1
        else:
            b = max(b, z + 1)
    print(len(s) - b)


```

Name: 3.py
Path: 8-04/3.py
```
import random

def is_prime(n, k=5):
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    r, d = 0, n - 1
    while d % 2 == 0:
        r += 1
        d //= 2

    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def solve_approach3(x, k):
    length = len(str(x))
    multiplier = sum(10 ** (length * i) for i in reversed(range(k)))
    y = x * multiplier
    return "YES" if is_prime(y) else "NO"

t = int(input())
for _ in range(t):
    x, k = map(int, input().split())
    print(solve_approach3(x, k)) 
```

Name: 1.py
Path: 8-04/1.py
```
ideal_set = set(range(1, 1001, 2))  

t = int(input())
for _ in range(t):
    k = int(input())
    print("YES" if k in ideal_set else "NO")

```

Name: 2a.py
Path: 8-04/2a.py
```
from itertools import combinations

def solve_expensive_number(s):
    n = len(s)
    min_cost = float('inf')
    min_remove = n - 1
    for length in range(1, min(15, n) + 1):
        for idxs in combinations(range(n), length):
            digits = [s[i] for i in idxs]
            digit_sum = sum(int(d) for d in digits)
            if digit_sum == 0:
                continue  
            value = int(''.join(digits))
            cost = value / digit_sum
            removed = n - length
            if cost < min_cost:
                min_cost = cost
                min_remove = removed
            elif cost == min_cost:
                min_remove = min(min_remove, removed)
    
    return min_remove

# Input
t = int(input())
for _ in range(t):
    s = input().strip()
    print(solve_expensive_number(s))

```

Name: 2.py
Path: 13-04/2.py
```
t = int(input())
for _ in range(t):
    n, m, l, r = map(int, input().split())
    length = r - l + 1
    removals = n - m
    keep_len = length - removals
    center = 0
    half = keep_len // 2
    if keep_len % 2 == 0:
        l_prime = max(l, center - half)
    else:
        l_prime = max(l, center - half)
    r_prime = l_prime + keep_len - 1
    if r_prime > r:
        shift = r_prime - r
        l_prime -= shift
        r_prime -= shift

    print(l_prime, r_prime)

```

Name: 3.py
Path: 13-04/3.py
```
def question3():
    t = int(input()) 
    for _ in range(t):
        n = int(input())
        p = [0] * (2 * n + 1)
        a_v = set(range(1, 2 * n + 1))  
        for i in range(1, n + 1):
            row = list(map(int, input().split()))
            for j, x in enumerate(row, start=1):
                s = i + j
                if p[s] == 0:
                    p[s] = x
                    if x in a_v:
                        a_v.remove(x)  
        missing_value = min(a_v)
        print(missing_value, *p[2:])
question3()

```

Name: 4.py
Path: 13-04/4.py
```
def group_stack(st):
    stack = []
    for ch in st:
        if stack and stack[-1][0] == ch:
            stack[-1][1] += 1
        else:
            stack.append([ch, 1])
    return stack

def is_stretch_valid(p, s):
    gp, gs = group_stack(p), group_stack(s)
    if len(gp) != len(gs):
        return "NO"
    for (cp, np), (cs, ns) in zip(gp, gs):
        if cp != cs or ns < np or ns > 2 * np:
            return "NO"
    return "YES"

for _ in range(int(input())):
    print(is_stretch_valid(input(), input()))

```

Name: 5.py
Path: 13-04/5.py
```
t = int(input())
for _ in range(t):
    n = int(input())
    a = list(map(int, input().split()))
    bit_count = [0] * 30
    for x in a:
        for b in range(30):
            if x & (1 << b):
                bit_count[b] += 1
    res = 0
    for x in a:
        s = 0
        for b in range(30):
            if x & (1 << b):
                s += (n - bit_count[b]) * (1 << b)
            else:
                s += bit_count[b] * (1 << b)
        res = max(res, s)
    
    print(res)

```

Name: 1.py
Path: 13-04/1.py
```

t = int(input(""))

for _ in range(t):
    s = input("")
    acronym = (''.join(word[0].upper() for word in s.split()).lower())
    print(acronym)
```

Name: h.py
Path: 13-04/h.py
```
t = int(input())
for _ in range(t):
    n, q = map(int, input().split())
    a = list(map(int, input().split()))
    memo = {}
    for _ in range(q):
        k, l, r = map(int, input().split())
        key = (k, l, r)
        if key in memo:
            print(memo[key])
            continue
        orig_k = k
        ans = 0
        for i in range(l - 1, r):
            while k % a[i] == 0:
                k //= a[i]
            ans += k
        memo[key] = ans
        print(ans)

```

Name: B.java
Path: contest/B.java
```
package contest;

import java.util.*;

public class B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int p = sc.nextInt(), q = sc.nextInt(), r = sc.nextInt();
            int[] a = new int[p];
            TreeSet<Integer> ts = new TreeSet<>();

            for (int i = 0; i < p; i++) {
                a[i] = sc.nextInt();
                ts.add(a[i]);
            }

            if (r > 1) {
                System.out.println("YES");
            } else {
                int max = ts.last();
                System.out.println(a[q - 1] == max ? "YES" : "NO");
            }
        }
    }
}

```

Name: C.java
Path: contest/C.java
```
package contest;
import java.util.*;

public class C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); 

        while (t-- > 0) {
            int n = sc.nextInt(); 
            int[] a = new int[n];

            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }

            String result = solve(a);
            System.out.println(result);
        }

        sc.close();
    }

    static String solve(int[] a) {
        int n = a.length;
        int[] prefixMin = new int[n];
        int[] suffixMax = new int[n];

        prefixMin[0] = a[0];
        for (int i = 1; i < n; i++) {
            prefixMin[i] = Math.min(prefixMin[i - 1], a[i]);
        }

        suffixMax[n - 1] = a[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffixMax[i] = Math.max(suffixMax[i + 1], a[i]);
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (prefixMin[i] == a[i] || suffixMax[i] == a[i]) {
                sb.append('1');
            } else {
                sb.append('0');
            }
        }

        return sb.toString();
    }
}

```

Name: E.java
Path: contest/E.java
```
package contest;

import java.util.*;

public class E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int testCases = scanner.nextInt();
        
        while (testCases-- > 0) {
            int arraySize = scanner.nextInt();
            int[] elements = new int[arraySize];
            Map<Integer, Integer> frequency = new HashMap<>();
            Set<Integer> valueSet = new HashSet<>();

            for (int i = 0; i < arraySize; i++) {
                elements[i] = scanner.nextInt();
                if (elements[i] <= arraySize) {
                    frequency.put(elements[i], frequency.getOrDefault(elements[i], 0) + 1);
                    valueSet.add(elements[i]);
                }
            }

            int mex = 0;
            while (valueSet.contains(mex)) {
                mex++;
            }

            int maxValidM = Math.min(mex, arraySize);
            int[] delta = new int[arraySize + 2];

            for (int m = 0; m <= maxValidM; m++) {
                int leftBound = frequency.getOrDefault(m, 0);
                int rightBound = arraySize - m;

                if (leftBound <= rightBound) {
                    delta[leftBound]++;
                    delta[rightBound + 1]--;
                }
            }

            int[] output = new int[arraySize + 1];
            int cumulative = 0;

            for (int idx = 0; idx <= arraySize; idx++) {
                cumulative += delta[idx];
                output[idx] = cumulative;
            }

            for (int idx = 0; idx <= arraySize; idx++) {
                System.out.print(output[idx]);
                if (idx < arraySize) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }
    }
}

```

Name: Main.java
Path: contest/Main.java
```
package contest;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        StringBuilder out = new StringBuilder();

        try {
            int t = in.nextInt();
            while (t-- > 0) {
                int n = in.nextInt(), k = in.nextInt();
                String s = in.next();

                BitSet bs = new BitSet(n);
                for (int i = 0; i < n; i++) {
                    if (s.charAt(i) == '1') bs.set(i);
                }

                int ones = bs.cardinality();

                if (ones <= k) {
                    out.append("Alice\n");
                    continue;
                }

                if (n >= 2 * k) {
                    out.append("Bob\n");
                    continue;
                }

                boolean win = false;
                for (int i = 0; i <= n - k; i++) {
                    int inWin = bs.get(i, i + k).cardinality();
                    if (ones - inWin <= k) {
                        win = true;
                        break;
                    }
                }

                out.append(win ? "Alice\n" : "Bob\n");
            }
        } finally {
            in.close();
        }

        System.out.print(out);
    }
}

```

Name: ModularSorting.java
Path: contest/ModularSorting.java
```
package contest;
import java.io.*;
import java.util.*;

public class ModularSorting {

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader();
        int testCases = reader.nextInt();

        while (testCases-- > 0) {
            int n = reader.nextInt();
            int m = reader.nextInt();
            int queryCount = reader.nextInt();

            ModularArray modArray = new ModularArray(n, m, reader);

            while (queryCount-- > 0) {
                int type = reader.nextInt();
                if (type == 1) {
                    int index = reader.nextInt();
                    int newValue = reader.nextInt();
                    modArray.update(index, newValue);
                } else if (type == 2) {
                    int k = reader.nextInt();
                    System.out.println(modArray.isSortableUnderGCD(k) ? "YES" : "NO");
                }
            }
        }
    }
}

class ModularArray {
    private final int[] arr;
    private final int n, m;
    private final List<Integer> divisors;
    private final Map<Integer, Integer> divisorIndexMap;
    private final int[] inversionCounts;

    ModularArray(int size, int mod, InputReader reader) throws IOException {
        this.n = size;
        this.m = mod;
        this.arr = new int[n + 2]; 
        for (int i = 1; i <= n; i++) {
            arr[i] = reader.nextInt();
        }

        this.divisors = calculateDivisors(m);
        this.divisorIndexMap = new HashMap<>();
        for (int i = 0; i < divisors.size(); i++) {
            divisorIndexMap.put(divisors.get(i), i);
        }

        this.inversionCounts = new int[divisors.size()];
        precomputeInversions();
    }

    private List<Integer> calculateDivisors(int num) {
        Set<Integer> result = new HashSet<>();
        for (int i = 1; i * i <= num; i++) {
            if (num % i == 0) {
                result.add(i);
                result.add(num / i);
            }
        }
        return new ArrayList<>(result);
    }

    private void precomputeInversions() {
        for (int d = 0; d < divisors.size(); d++) {
            int g = divisors.get(d);
            int count = 0;
            for (int i = 1; i < n; i++) {
                if ((arr[i] % g) > (arr[i + 1] % g)) {
                    count++;
                }
            }
            inversionCounts[d] = count;
        }
    }

    public void update(int pos, int newValue) {
        int oldValue = arr[pos];

        for (int d = 0; d < divisors.size(); d++) {
            int g = divisors.get(d);

            if (pos > 1) {
                int left = arr[pos - 1] % g;
                inversionCounts[d] += (left > newValue % g ? 1 : 0) - (left > oldValue % g ? 1 : 0);
            }

            if (pos < n) {
                int right = arr[pos + 1] % g;
                inversionCounts[d] += (newValue % g > right ? 1 : 0) - (oldValue % g > right ? 1 : 0);
            }
        }

        arr[pos] = newValue;
    }

    public boolean isSortableUnderGCD(int k) {
        int g = gcd(k, m);
        int index = divisorIndexMap.get(g);
        int limit = m / g - 1;
        return inversionCounts[index] <= limit;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}

class InputReader {
    private final BufferedReader br;
    private StringTokenizer tokenizer;

    public InputReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    public String next() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(br.readLine());
        }
        return tokenizer.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(next());
    }
}

```

Name: A.java
Path: contest/A.java
```
package contest;
import java.util.*;

public class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        int[] testCases = new int[t];

        for (int i = 0; i < t; i++) {
            testCases[i] = sc.nextInt();
        }

        List<String> results = new ArrayList<>();

        for (int i = 0; i < t; i++) {
            int n = testCases[i];
            Set<Integer> board = new HashSet<>();
            for (int j = 0; j < n; j++) {
                board.add(j);
            }

            while (true) {
                boolean moveFound = false;

                List<Integer> current = new ArrayList<>(board);

                for (int a : current) {
                    for (int b : board) {
                        if (a != b && (a + b) % 4 == 3) {
                            board.remove(a);
                            board.remove(b);
                            moveFound = true;
                            break;
                        }
                    }
                    if (moveFound) break;
                }

                if (!moveFound) {
                    results.add("Alice");
                    break;
                }

                if (board.isEmpty()) {
                    results.add("Bob");
                    break;
                }
            }
        }

        for (String result : results) {
            System.out.println(result);
        }

        sc.close();
    }
}

```

